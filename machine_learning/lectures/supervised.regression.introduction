{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5cc84594",
   "metadata": {},
   "source": [
    "# Pseudoinversa de Penrose\n",
    "\n",
    "$$y(X) = (X^T X)^{-1} X^T Y$$\n",
    "\n",
    "$$X\\in \\mathbb{R}^{m\\times n}$$\n",
    "$$Y\\in \\mathbb{R}^{m\\times 1}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "63a4730b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97465804",
   "metadata": {},
   "outputs": [],
   "source": [
    "def synthetic_line_data( L: list, N: list, n: float )->np.array:\n",
    "    \"\"\"\n",
    "      Generates a list of samples (x_i, y_i) that describes the\n",
    "      line described by:\n",
    "        -> y_i = L[0]*x_i + L[1]  + n_i.\n",
    "      \n",
    "      where n_i is a normal distributed random noise with 0 mean and n variance.\n",
    "      \n",
    "      N[2] samples are randomly generated considering a normal \n",
    "      distribution with N[0] mean and N[1] variance.\n",
    "      \n",
    "              \n",
    "      @param L: -> [slope, bias]\n",
    "      @param N: -> [mean, variance, number of samples]\n",
    "      @param n: -> noise variance, float>0\n",
    "      \n",
    "      @return data: list of samples (x_i,y_i) -> shape = (N[2]_samples, 2)\n",
    "      @return raw : data with no noise        -> shape = (N[2]_samples, 1)\n",
    "    \"\"\"\n",
    "    x    = np.random.normal( N[0],N[1],N[2] )\n",
    "    n    = np.random.normal(   0 , n  ,N[2] )\n",
    "    raw  = L[0]*x + L[1]\n",
    "    y    = raw + n\n",
    "    data = np.concatenate( ( x[:,np.newaxis],\n",
    "                             y[:,np.newaxis] ), \n",
    "                               axis=-1  )\n",
    "    raw  = raw[:,np.newaxis]\n",
    "    return data, raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "249eb67f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_noise(N, m, b, mean=0, var=0.25):\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
